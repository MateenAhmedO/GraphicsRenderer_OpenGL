OPENGL – Overview

OpenGL (Open Graphics Library) is a specification, not a direct implementation. It defines what graphics functions should do, but not how they're implemented.

OpenGL is managed by the Khronos Group, which defines what each function (like glDrawArrays, glTexImage2D, etc.) is supposed to do. These functions are then implemented by GPU vendors (NVIDIA, AMD, Intel, etc.) inside their graphics drivers.

These implementations are compiled binary code. Your program accesses them through function pointers loaded at runtime.

OpenGL is a state machine. You configure it by setting states (like which shader or texture to use), and when you draw, it uses the current states. Managing state properly is crucial for performance and stability.






Creating a Window with GLFW
OpenGL can't create windows or handle input on its own. We use GLFW to:

Create a window

Handle input (keyboard, mouse)

Manage the OpenGL context

Provide time functions and more

Typical GLFW Workflow:

glfwInit()

glfwWindowHint() - set OpenGL version/profile

glfwCreateWindow()

glfwMakeContextCurrent()

Main loop: glfwSwapBuffers() + glfwPollEvents()

Tip: Always check if glfwCreateWindow() returns nullptr. It may fail due to version incompatibility.









Loading OpenGL Functions with GLEW / GLAD
Even after creating a window, you can't call most OpenGL functions like glGenBuffers or glUseProgram right away — they're not included in the headers.

These are provided by the GPU driver, so they must be loaded at runtime using function pointers.

Instead of doing it manually, we use:

GLEW (older, stable)

GLAD (modern, preferred)

Others: glbinding, GL3W

These libraries detect your GPU's OpenGL version and load all function pointers automatically.

Tip: GLAD is a good modern choice and gives you control over versions.

Legacy OpenGL vs Modern OpenGL
Legacy OpenGL:

Uses the fixed-function pipeline

Simple to use

Poor performance

No shaders (built-in lighting only)

Examples: glBegin(), glVertex3f()

Deprecated

Modern OpenGL:

Fully programmable pipeline

Requires setup but gives full GPU control

Excellent performance

Requires shaders written in GLSL

Examples: glGenBuffers(), VAOs, shaders

Industry standard today

Tip: Use legacy OpenGL only to understand basic concepts. Switch to modern OpenGL ASAP.







VBO (Vertex Buffer Objects)

it is basically a array of vertex in the GPU memory. first we allocate a memory and then give it a argument as uint. then we bind the memory to the uint as buffer, then we tell that how much the size it is. this will be the data that we need to draw. next we will have to give the shader that will tell how to draw the triangle.



VAO(Vertex Attribute Objects)

basically VBO has the data which is stored in the GPU. now shader reads the buffer, it needs to know the layout the buffer. what kind of data is it? positions, texture coordinates, normals? What is in the memory and what is the layout? It cant know automatically what data is present in the buffer? so attribute tells what kind of data it is.

Vertex is not always positions, it is a point, it can also tell the texture coordinates, or the normals. not always positions.OpenGL doesnt know what is the data of the vertices and what the layout is.

positions is an attribute
color is an attribute
tangent is an attribute 

there are vertices of attributes.


SHADER 

it is a block of code that gets compiled and written as text but it is run by the GPU. 
shader tells that how should the geometry be drawn, the color,
what happens to the buffer, this is all done by the shader.

VERTEX SHADERS | FRAGMENT SHADERS (PIXEL)

DRAW CALL -> VERTEX -> FRAGMENT -> OUTPUT!!!


vertex shader is called for each vertex. it tells opengl where the vertex should be in the screen space. it also passes data to next stages.
the index 0 will be used to access the data in the vertex shader


the fragment shader is called for each pixel that needs to be filled in and tells the color of the pixel with which it needs to be drawn.
